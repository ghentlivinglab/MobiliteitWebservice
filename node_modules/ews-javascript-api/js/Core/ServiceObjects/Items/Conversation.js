"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var XmlElementNames_1 = require("../../XmlElementNames");
var ServiceObject_1 = require("../ServiceObject");
/**
 * ## *Not Implemented*
 */
var Conversation = (function (_super) {
    __extends(Conversation, _super);
    function Conversation() {
        _super.apply(this, arguments);
    }
    //////Id: ConversationId;
    //////Topic: string;
    //////UniqueRecipients: StringList;
    //////GlobalUniqueRecipients: StringList;
    //////UniqueUnreadSenders: StringList;
    //////GlobalUniqueUnreadSenders: StringList;
    //////UniqueSenders: StringList;
    //////GlobalUniqueSenders: StringList;
    //////LastDeliveryTime: Date;
    //////GlobalLastDeliveryTime: Date;
    //////Categories: StringList;
    //////GlobalCategories: StringList;
    //////FlagStatus: ConversationFlagStatus;
    //////GlobalFlagStatus: ConversationFlagStatus;
    //////HasAttachments: boolean;
    //////GlobalHasAttachments: boolean;
    //////MessageCount: number;
    //////GlobalMessageCount: number;
    //////UnreadCount: number;
    //////GlobalUnreadCount: number;
    //////Size: number;
    //////GlobalSize: number;
    //////ItemClasses: StringList;
    //////GlobalItemClasses: StringList;
    //////Importance: Importance;
    //////GlobalImportance: Importance;
    //////ItemIds: ItemIdCollection;
    //////GlobalItemIds: ItemIdCollection;
    //////LastModifiedTime: Date;
    //////InstanceKey: any[];// System.Byte[];
    //////Preview: string;
    //////IconIndex: IconIndex;
    //////GlobalIconIndex: IconIndex;
    //////DraftItemIds: ItemIdCollection;
    //////HasIrm: boolean;
    //////GlobalHasIrm: boolean;
    //////ClearItemFlags(contextFolderId: FolderId): any { throw new Error("Conversation.ts - ClearItemFlags : Not implemented."); }
    //////CopyItemsInConversation(contextFolderId: FolderId, destinationFolderId: FolderId): any { throw new Error("Conversation.ts - CopyItemsInConversation : Not implemented."); }
    //////DeleteItems(contextFolderId: FolderId, deleteMode: DeleteMode): any { throw new Error("Conversation.ts - DeleteItems : Not implemented."); }
    //////DisableAlwaysCategorizeItems(processSynchronously: boolean): any { throw new Error("Conversation.ts - DisableAlwaysCategorizeItems : Not implemented."); }
    //////DisableAlwaysDeleteItems(processSynchronously: boolean): any { throw new Error("Conversation.ts - DisableAlwaysDeleteItems : Not implemented."); }
    //////DisableAlwaysMoveItemsInConversation(processSynchronously: boolean): any { throw new Error("Conversation.ts - DisableAlwaysMoveItemsInConversation : Not implemented."); }
    //////EnableAlwaysCategorizeItems(categories: string[]/*System.Collections.Generic.IEnumerable<string>*/, processSynchronously: boolean): any { throw new Error("Conversation.ts - EnableAlwaysCategorizeItems : Not implemented."); }
    //////EnableAlwaysDeleteItems(processSynchronously: boolean): any { throw new Error("Conversation.ts - EnableAlwaysDeleteItems : Not implemented."); }
    //////EnableAlwaysMoveItems(destinationFolderId: FolderId, processSynchronously: boolean): any { throw new Error("Conversation.ts - EnableAlwaysMoveItems : Not implemented."); }
    //////FlagItems(contextFolderId: FolderId, startDate: Date, dueDate: Date): any { throw new Error("Conversation.ts - FlagItems : Not implemented."); }
    //////FlagItemsComplete(contextFolderId: FolderId, completeDate: Date): any { throw new Error("Conversation.ts - FlagItemsComplete : Not implemented."); }
    //////GetChangeXmlElementName(): string { throw new Error("Conversation.ts - GetChangeXmlElementName : Not implemented."); }
    //////GetDeleteFieldXmlElementName(): string { throw new Error("Conversation.ts - GetDeleteFieldXmlElementName : Not implemented."); }
    //////GetExtendedProperties(): ExtendedPropertyCollection { throw new Error("Conversation.ts - GetExtendedProperties : Not implemented."); }
    //////GetIdPropertyDefinition(): PropertyDefinition { throw new Error("Conversation.ts - GetIdPropertyDefinition : Not implemented."); }
    //////GetIsTimeZoneHeaderRequired(isUpdateOperation: boolean): boolean { throw new Error("Conversation.ts - GetIsTimeZoneHeaderRequired : Not implemented."); }
    //////GetMinimumRequiredServerVersion(): ExchangeVersion { throw new Error("Conversation.ts - GetMinimumRequiredServerVersion : Not implemented."); }
    //////GetSchema(): ServiceObjectSchema { throw new Error("Conversation.ts - GetSchema : Not implemented."); }
    //////GetSetFieldXmlElementName(): string { throw new Error("Conversation.ts - GetSetFieldXmlElementName : Not implemented."); }
    Conversation.prototype.GetXmlElementName = function () {
        return XmlElementNames_1.XmlElementNames.Conversation;
    };
    return Conversation;
}(ServiceObject_1.ServiceObject));
exports.Conversation = Conversation;
