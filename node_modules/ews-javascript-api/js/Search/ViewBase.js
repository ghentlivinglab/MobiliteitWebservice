"use strict";
var XmlAttributeNames_1 = require("../Core/XmlAttributeNames");
var XmlNamespace_1 = require("../Enumerations/XmlNamespace");
var PropertySet_1 = require("../Core/PropertySet");
var ViewBase = (function () {
    function ViewBase() {
    }
    //private propertySet: PropertySet;
    ViewBase.prototype.AddJsonProperties = function (jsonRequest /*JsonObject*/, service) { throw new Error("ViewBase.ts - AddJsonProperties : Not implemented."); };
    ViewBase.prototype.GetMaxEntriesReturned = function () { throw new Error("abstract - ViewBase.ts - GetMaxEntriesReturned : Not implemented."); };
    ViewBase.prototype.GetPropertySetOrDefault = function () { return this.PropertySet || PropertySet_1.PropertySet.FirstClassProperties; };
    ViewBase.prototype.GetServiceObjectType = function () { throw new Error("abstract - ViewBase.ts - GetServiceObjectType : Not implemented."); };
    ViewBase.prototype.GetViewJsonTypeName = function () { return this.GetViewXmlElementName(); };
    ViewBase.prototype.GetViewXmlElementName = function () { throw new Error("abstract - ViewBase.ts - GetViewXmlElementName : Not implemented."); };
    ViewBase.prototype.InternalValidate = function (request) {
        if (this.PropertySet !== null && typeof this.PropertySet !== 'undefined') {
            this.PropertySet.InternalValidate();
            this.PropertySet.ValidateForRequest(request, true /*summaryPropertiesOnly*/);
        }
    };
    ViewBase.prototype.InternalWritePagingToJson = function (jsonView /*JsonObject*/, service) { throw new Error("ViewBase.ts - InternalWritePagingToJson : Not implemented."); };
    ViewBase.prototype.InternalWriteSearchSettingsToXml = function (writer, groupBy) { throw new Error("abstract - ViewBase.ts - InternalWriteSearchSettingsToXml : Not implemented."); };
    ViewBase.prototype.InternalWriteViewToXml = function (writer) {
        var maxEntriesReturned = this.GetMaxEntriesReturned();
        if (!isNaN(maxEntriesReturned)) {
            writer.WriteAttributeValue(XmlAttributeNames_1.XmlAttributeNames.MaxEntriesReturned, maxEntriesReturned);
        }
    };
    ViewBase.prototype.WriteAttributesToXml = function (writer) { throw new Error("abstract - ViewBase.ts - WriteAttributesToXml : Not implemented."); };
    ViewBase.prototype.WriteGroupingToJson = function (service, groupBy) { throw new Error("abstract - ViewBase.ts - WriteGroupingToJson : Not implemented."); };
    ViewBase.prototype.WriteOrderByToXml = function (writer) { throw new Error("ViewBase.ts - WriteOrderByToXml : Not implemented."); };
    ViewBase.prototype.WritePagingToJson = function (service) { throw new Error("ViewBase.ts - WritePagingToJson : Not implemented."); };
    ViewBase.prototype.WriteShapeToJson = function (jsonRequest /*JsonObject*/, service) { throw new Error("ViewBase.ts - WriteShapeToJson : Not implemented."); };
    ViewBase.prototype.WriteToXml = function (writer, groupBy) {
        this.GetPropertySetOrDefault().WriteToXml(writer, this.GetServiceObjectType());
        writer.WriteStartElement(XmlNamespace_1.XmlNamespace.Messages, this.GetViewXmlElementName());
        this.InternalWriteViewToXml(writer);
        writer.WriteEndElement(); // this.GetViewXmlElementName()
        this.InternalWriteSearchSettingsToXml(writer, groupBy);
    };
    return ViewBase;
}());
exports.ViewBase = ViewBase;
