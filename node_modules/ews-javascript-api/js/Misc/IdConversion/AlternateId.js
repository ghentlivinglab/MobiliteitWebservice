"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var AlternateIdBase_1 = require("./AlternateIdBase");
var AlternateId = (function (_super) {
    __extends(AlternateId, _super);
    function AlternateId() {
        _super.apply(this, arguments);
    }
    AlternateId.prototype.GetXmlElementName = function () { throw new Error("AlternateId.ts - GetXmlElementName : Not implemented."); };
    AlternateId.prototype.InternalToJson = function (jsonObject) { throw new Error("AlternateId.ts - InternalToJson : Not implemented."); };
    AlternateId.prototype.InternalValidate = function () { throw new Error("AlternateId.ts - InternalValidate : Not implemented."); };
    AlternateId.prototype.LoadAttributesFromJson = function (responseObject) { throw new Error("AlternateId.ts - LoadAttributesFromJson : Not implemented."); };
    AlternateId.prototype.LoadAttributesFromXml = function (reader) { throw new Error("AlternateId.ts - LoadAttributesFromXml : Not implemented."); };
    AlternateId.prototype.WriteAttributesToXml = function (writer) { throw new Error("AlternateId.ts - WriteAttributesToXml : Not implemented."); };
    AlternateId.SchemaTypeName = "AlternateIdType";
    return AlternateId;
}(AlternateIdBase_1.AlternateIdBase));
exports.AlternateId = AlternateId;
//}
