"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var ComplexPropertyCollection_1 = require("./ComplexPropertyCollection");
var FolderIdCollection = (function (_super) {
    __extends(FolderIdCollection, _super);
    function FolderIdCollection() {
        _super.apply(this, arguments);
    }
    FolderIdCollection.prototype.Add = function (folderId) { throw new Error("FolderIdCollection.ts - Add : Not implemented."); };
    //Add(folderName: WellKnownFolderName): FolderId { throw new Error("FolderIdCollection.ts - Add : Not implemented."); }
    FolderIdCollection.prototype.Clear = function () { throw new Error("FolderIdCollection.ts - Clear : Not implemented."); };
    FolderIdCollection.prototype.CreateComplexProperty = function (xmlElementName) { throw new Error("FolderIdCollection.ts - CreateComplexProperty : Not implemented."); };
    FolderIdCollection.prototype.CreateDefaultComplexProperty = function () { throw new Error("FolderIdCollection.ts - CreateDefaultComplexProperty : Not implemented."); };
    FolderIdCollection.prototype.GetCollectionItemXmlElementName = function (complexProperty) { throw new Error("FolderIdCollection.ts - GetCollectionItemXmlElementName : Not implemented."); };
    FolderIdCollection.prototype.Remove = function (folderId) { throw new Error("FolderIdCollection.ts - Remove : Not implemented."); };
    //Remove(folderName: WellKnownFolderName): boolean { throw new Error("FolderIdCollection.ts - Remove : Not implemented."); }
    FolderIdCollection.prototype.RemoveAt = function (index) { throw new Error("FolderIdCollection.ts - RemoveAt : Not implemented."); };
    return FolderIdCollection;
}(ComplexPropertyCollection_1.ComplexPropertyCollection));
exports.FolderIdCollection = FolderIdCollection;
//}
