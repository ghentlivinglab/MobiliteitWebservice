"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var XmlElementNames_1 = require("../Core/XmlElementNames");
var XmlNamespace_1 = require("../Enumerations/XmlNamespace");
var ExtensionMethods_1 = require("../ExtensionMethods");
var ComplexProperty_1 = require("./ComplexProperty");
var Mailbox = (function (_super) {
    __extends(Mailbox, _super);
    function Mailbox(address, routingType) {
        _super.call(this);
        this.___implementsInterface = ["ISelfValidate", "IJsonSerializable", "GetSearchString"];
        this.___typeName = "Mailbox";
        this.Address = address;
        this.RoutingType = routingType;
    }
    Object.defineProperty(Mailbox.prototype, "IsValid", {
        get: function () { return !ExtensionMethods_1.StringHelper.IsNullOrEmpty(this.Address); },
        enumerable: true,
        configurable: true
    });
    Mailbox.prototype.Equals = function (obj) {
        if (this === obj) {
            return true;
        }
        else {
            var other = obj;
            if (!(other instanceof Mailbox)) {
                return false;
            }
            else if (((this.Address == null) && (other.Address == null)) ||
                ((this.Address != null) && this.Address === other.Address)) {
                return ((this.RoutingType == null) && (other.RoutingType == null)) ||
                    ((this.RoutingType != null) && this.RoutingType === other.RoutingType);
            }
            else {
                return false;
            }
        }
    };
    //GetHashCode(): number { throw new Error("Mailbox.ts - GetHashCode : Not implemented."); }
    //InternalToJson(service: ExchangeService): any { throw new Error("Mailbox.ts - InternalToJson : Not implemented."); }
    Mailbox.prototype.InternalValidate = function () {
        _super.prototype.InternalValidate.call(this);
        //debug: //check for validity implement next line of codes
        //EwsUtilities.ValidateNonBlankStringParamAllowNull(this.Address, "address");
        //EwsUtilities.ValidateNonBlankStringParamAllowNull(this.RoutingType, "routingType");
    };
    //LoadFromJson(jsonProperty: JsonObject, service: ExchangeService): any { throw new Error("Mailbox.ts - LoadFromJson : Not implemented."); }
    Mailbox.prototype.LoadFromXmlJsObject = function (jsonProperty, service) {
        //debug:
        if (jsonProperty[XmlElementNames_1.XmlElementNames.EmailAddress]) {
            this.Address = jsonProperty[XmlElementNames_1.XmlElementNames.EmailAddress]; //.ReadAsString(XmlElementNames.EmailAddress);
        }
        if (jsonProperty[XmlElementNames_1.XmlElementNames.RoutingType]) {
            this.RoutingType = jsonProperty[XmlElementNames_1.XmlElementNames.RoutingType]; //.ReadAsString(XmlElementNames.RoutingType);
        }
    };
    Mailbox.prototype.ToString = function () {
        if (!this.IsValid) {
            return ExtensionMethods_1.StringHelper.Empty;
        }
        else if (!ExtensionMethods_1.StringHelper.IsNullOrEmpty(this.RoutingType)) {
            return this.RoutingType + ":" + this.Address;
        }
        else {
            return this.Address;
        }
    };
    Mailbox.prototype.ReadElementsFromXmlJsObject = function (reader) {
        switch (reader.LocalName) {
            case XmlElementNames_1.XmlElementNames.EmailAddress:
                this.Address = reader.ReadElementValue();
                return true;
            case XmlElementNames_1.XmlElementNames.RoutingType:
                this.RoutingType = reader.ReadElementValue();
                return true;
            default:
                return false;
        }
    };
    Mailbox.prototype.WriteElementsToXml = function (writer) {
        writer.WriteElementValue(XmlNamespace_1.XmlNamespace.Types, XmlElementNames_1.XmlElementNames.EmailAddress, this.Address);
        writer.WriteElementValue(XmlNamespace_1.XmlNamespace.Types, XmlElementNames_1.XmlElementNames.RoutingType, this.RoutingType);
    };
    Mailbox.prototype.GetSearchString = function () {
        return this.Address;
    };
    return Mailbox;
}(ComplexProperty_1.ComplexProperty));
exports.Mailbox = Mailbox;
